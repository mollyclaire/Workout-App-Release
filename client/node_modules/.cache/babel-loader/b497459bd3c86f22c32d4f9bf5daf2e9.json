{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar UIfx = function UIfx(file, config) {\n  _classCallCheck(this, UIfx);\n\n  _initialiseProps.call(this);\n\n  var namespace = \"uifx\";\n\n  var throttle = function throttle(fn, delay) {\n    var lastCall = 0;\n    return function () {\n      var now = new Date().getTime();\n\n      if (now - lastCall < delay) {\n        return;\n      }\n\n      lastCall = now;\n      return fn.apply(undefined, arguments);\n    };\n  };\n\n  var validateURI = function validateURI(file) {\n    if (!file) {\n      throw Error('Requires valid URI path for \"file\"');\n    } else return file;\n  };\n\n  var validateVolume = function validateVolume(volume) {\n    var message = '\"Volume\" must be an number between 0.0 and 1.0';\n    if (volume && typeof volume !== \"number\") throw Error(message);\n    if (volume < 0 || volume > 1) throw Error(message);\n    return volume ? volume : 1.0;\n  };\n\n  var validateThrottleMs = function validateThrottleMs(throttleMs) {\n    var message = '\"throttleMs\" must be a number greater than zero';\n    if (throttleMs && typeof throttleMs !== \"number\") throw Error(message);\n    if (throttleMs < 0) throw Error(message);\n    return throttleMs ? throttleMs : 0;\n  };\n\n  var volume = validateVolume(config && config.volume);\n  var throttleMs = validateThrottleMs(config && config.throttleMs);\n\n  var appendAudioElement = function appendAudioElement(file) {\n    // hack to force browser\n    // to preload audio file\n    // hash function: https://stackoverflow.com/a/8831937/11330825\n    var hash = function hash(str) {\n      var hash = 0;\n\n      if (str.length === 0) {\n        return hash;\n      }\n\n      for (var i = 0; i < str.length; i++) {\n        var char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n      }\n\n      return Math.abs(hash);\n    };\n\n    var id = namespace + '-' + hash(file);\n    var audioElement = document.createElement(\"audio\");\n    audioElement.id = id;\n    audioElement.src = file;\n    audioElement.preload = \"auto\";\n    document.body.appendChild(audioElement);\n    return file;\n  };\n\n  this.file = appendAudioElement(validateURI(file));\n  this.volume = volume;\n  this.throttleMs = throttleMs;\n  this.play = throttleMs > 0 ? throttle(this.play, throttleMs) : this.play;\n  this.setVolume = this.setVolume;\n  this.validateVolume = validateVolume;\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.play = function (volume) {\n    _this.validateVolume(volume);\n\n    var audioElement = new Audio(_this.file);\n    audioElement.load();\n    audioElement.addEventListener(\"loadeddata\", function () {\n      audioElement.volume = volume >= 0 && volume <= 1 ? volume : _this.volume;\n      var audioElementPromised = audioElement.play();\n      audioElementPromised.then(function () {// autoplay started, everyting is ok\n      }).catch(function (error) {\n        console.log('UIfx says: \"had a problem playing file: ' + _this.file + '\"');\n      });\n    });\n    return _this;\n  };\n\n  this.setVolume = function (volume) {\n    _this.validateVolume(volume);\n\n    _this.volume = volume;\n    return _this;\n  };\n};\n\nexports.default = UIfx;","map":null,"metadata":{},"sourceType":"script"}